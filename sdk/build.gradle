apply plugin: 'jacoco'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'org.sonarqube'

buildscript {
    repositories {
        jcenter()

    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}



def currentVersionName = "3.0.8"
def getVersionName = { ->
    return currentVersionName
}

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName getVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        project.archivesBaseName = "sdk"
        project.version = currentVersionName
    }

    buildTypes {
        release {
            testCoverageEnabled = false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    buildToolsVersion = '30.0.2'
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}

project(":sdk") {
    apply plugin: "com.jfrog.artifactory"
    sonarqube {
        properties {
            property "sonar.projectKey", "drive-sdk-android-next"
            property "sonar.sources", "src/main"
            property "sonar.tests", "src/test"
            property "sonar.host.url", "https://cicd.next.dil.services/sonarqube"
            property "sonar.coverage.jacoco.xmlReportPaths", "build/coverageReport/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml"
            property "sonar.dependencyCheck.reportPath", "dependency-check-report.xml"
            property "sonar.dependencyCheck.htmlReportPath", "dependency-check-report.html"
        }
    }
}
project.tasks["sonarqube"].dependsOn "testDebugUnitTestCoverage"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    // Google Location service
    def play_services_version = "18.0.0"
    implementation "com.google.android.gms:play-services-location:$play_services_version"

    // Koins
    implementation "org.koin:koin-android:2.2.0-rc-4"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.5.30"


    // WorkManager
    def work_version = "2.6.0"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"


    //Rx
    def rx_kotlin_version = '2.4.0'
    implementation("io.reactivex.rxjava2:rxkotlin:$rx_kotlin_version")

    // Jackson
    def jackson_version = '2.13.0'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"


    // JUnit 4 framework
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    testImplementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    testImplementation "org.koin:koin-test:2.2.2"
    // Optional -- Robolectric environment
    testImplementation 'org.robolectric:robolectric:4.6.1'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test:runner:1.4.0'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-inline:3.12.4'

    androidTestImplementation "org.koin:koin-test:2.2.2"
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

}
repositories {
    mavenCentral()
    jcenter()
}


def libraryGroupId = 'axa.tex.drive'
def libraryArtifactId = "${archivesBaseName}".toLowerCase()

publishing {
    publications {
        android.libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def buildType = output.name // output.name is {debug, release}
                "${buildType}"(MavenPublication) {
                    //groupId libraryGroupId
                    version currentVersionName
                    //artifactId "${libraryArtifactId}-sdk-${buildType}" // texdrive-sdk-{release,debug}
                    artifact("$buildDir/outputs/aar/sdk-${buildType}.aar") // TexDrive-{release,debug}-v2.1.3.aar


                    pom.withXml {
                        def dependencies = asNode().appendNode('dependencies')
                        configurations.getByName("releaseCompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                            def dependency = dependencies.appendNode('dependency')
                            dependency.appendNode('groupId', it.moduleGroup)
                            dependency.appendNode('artifactId', it.moduleName)
                            dependency.appendNode('version', it.moduleVersion)
                        }
                    }

                }
            }
        }
    }
}


artifactory {
    contextUrl = 'https://axadil.jfrog.io/axadil/'
    publish {
        repository {
            repoKey = 'android-tex'
            //username = System.getenv("ARTIFACTORY_USERNAME") //artifactory_username
            //password = System.getenv("ARTIFACTORY_PASSWORD") //artifactory_password
            username = 'emasson'
            password = 'crocodil'
            maven = true
        }
        defaults {
            publications('release')
            publishArtifacts = true
            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
            publishPom = true
        }
        resolve {
            repository {
                repoKey = 'android'
                username = 'emasson'
                password = 'crocodil'
                maven = true
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
    // Custom reports directory can be specfied like this:
    reportsDir = file("$buildDir/coverageReport")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    android.libraryVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.enabled = true
                xml.enabled = true
            }

            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*'
            ]
            def javaCompileTask
            if (variant.hasProperty('javaCompileProvider')) {
                // Android 3.3.0+
                javaCompileTask = variant.javaCompileProvider.get()
            } else {
                javaCompileTask = variant.javaCompile
            }
            def javaClasses = fileTree(dir: javaCompileTask.destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories.from = [javaClasses, kotlinClasses]
            sourceDirectories.from =[
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ]

            executionData.from = "${project.buildDir}/jacoco/${testTaskName}.exec"
        }
    }
}
