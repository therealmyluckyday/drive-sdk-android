apply plugin: 'jacoco'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

buildscript {
    repositories {
        mavenCentral()

    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        //classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}



def currentVersionName = "3.0.11"
def getVersionName = { ->
    return currentVersionName
}

ext.sdkVersion = currentVersionName

android {
    namespace = "axa.tex.drive.sdk"
    compileSdk 34
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        project.archivesBaseName = "sdk"
        project.version = currentVersionName
    }

    buildTypes {
        release {
            testCoverageEnabled = false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    compileOptions {
        sourceCompatibility = 17
        targetCompatibility = 17
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    // Google Location service
    def play_services_version = "21.0.1"
    implementation "com.google.android.gms:play-services-location:$play_services_version"

    // Koins
    def koin_version = "3.3.2"
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-core:$koin_version"

    // WorkManager
    def work_version = "2.8.1"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"


    //Rx
    def rx_kotlin_version = '2.4.0'
    implementation("io.reactivex.rxjava2:rxkotlin:$rx_kotlin_version")

    // Jackson
    def jackson_version = '2.13.2'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"


    // JUnit 4 framework
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    testImplementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    testImplementation "io.insert-koin:koin-test:2.2.2"
    // Optional -- Robolectric environment
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test:runner:1.5.2'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-inline:3.12.4'

    androidTestImplementation "io.insert-koin:koin-test:2.2.2"
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

}
repositories {
    mavenCentral()
}


jacoco {
    toolVersion = "0.8.7"
    // Custom reports directory can be specfied like this:
    reportsDirectory = file("$buildDir/coverageReport")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}


def myGroupId = 'com.github.therealmyluckyday'
def myArtifactId = 'drive-sdk-android'
def repoPath = "${System.getProperty('user.home')}/Projects/texSDK-repo"
def publishingPath = "$repoPath/android/sdk"
def docPath = "$repoPath/android/docs/${rootProject.sdkVersion}"
def javadocPath = "$docPath/javadoc/"
def readmeSourcePath = "${rootProject.projectDir}/README.md"

publishing {
    publications {
        release(MavenPublication) {
            groupId = myGroupId
            artifactId = myArtifactId
            version = rootProject.sdkVersion

            afterEvaluate {
                from components.release
            }
        }
    }
    repositories {
        maven {
            name = 'AxaSDK'
            url = "${project.buildDir}/repo"
        }
    }
}

tasks.register('generateRepo', Zip) {
    def publishTask = tasks.named('publishReleasePublicationToAxaSDKRepository')
    from publishTask.map { it.getRepository().getUrl() }
    into 'mylibrary'
    archiveFileName.set('mylibrary.zip')
}


//afterEvaluate {
//    publishing {
//        publications {
//            release(MavenPublication) {
//                groupId = myGroupId
//                artifactId = myArtifactId
//                version rootProject.sdkVersion
//                from components.release
//            }
//        }
//        repositories {
//            maven { url publishingPath }
//        }
//    }
//}

//project.afterEvaluate {
//    android.libraryVariants.all { variant ->
//        def variantName = variant.name
//        def testTaskName = "test${variantName.capitalize()}UnitTest"
//
//        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
//            group = "Reporting"
//            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."
//
//            reports {
//                html.enabled = true
//                xml.enabled = true
//            }
//
//            def excludes = [
//                    '**/R.class',
//                    '**/R$*.class',
//                    '**/BuildConfig.*',
//                    '**/Manifest*.*',
//                    '**/*Test*.*',
//                    'android/**/*.*'
//            ]
//            def javaCompileTask
//            if (variant.hasProperty('javaCompileProvider')) {
//                // Android 3.3.0+
//                javaCompileTask = variant.javaCompileProvider.get()
//            } else {
//                javaCompileTask = variant.javaCompile
//            }
//            def javaClasses = fileTree(dir: javaCompileTask.destinationDir, excludes: excludes)
//            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
//            classDirectories.from = [javaClasses, kotlinClasses]
//            sourceDirectories.from =[
//                    "$project.projectDir/src/main/java",
//                    "$project.projectDir/src/${variantName}/java",
//                    "$project.projectDir/src/main/kotlin",
//                    "$project.projectDir/src/${variantName}/kotlin"
//            ]
//
//            executionData.from = "${project.buildDir}/jacoco/${testTaskName}.exec"
//        }
//    }
//}
